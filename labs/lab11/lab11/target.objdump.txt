
target:     file format elf64-x86-64


Disassembly of section .init:

0000000000000650 <_init>:
_init():
 650:	48 83 ec 08          	sub    $0x8,%rsp
 654:	48 8b 05 85 09 20 00 	mov    0x200985(%rip),%rax        # 200fe0 <__gmon_start__>
 65b:	48 85 c0             	test   %rax,%rax
 65e:	74 02                	je     662 <_init+0x12>
 660:	ff d0                	callq  *%rax
 662:	48 83 c4 08          	add    $0x8,%rsp
 666:	c3                   	retq   

Disassembly of section .plt:

0000000000000670 <.plt>:
 670:	ff 35 92 09 20 00    	pushq  0x200992(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>
 676:	ff 25 94 09 20 00    	jmpq   *0x200994(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>
 67c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000680 <puts@plt>:
 680:	ff 25 92 09 20 00    	jmpq   *0x200992(%rip)        # 201018 <puts@GLIBC_2.2.5>
 686:	68 00 00 00 00       	pushq  $0x0
 68b:	e9 e0 ff ff ff       	jmpq   670 <.plt>

0000000000000690 <setbuf@plt>:
 690:	ff 25 8a 09 20 00    	jmpq   *0x20098a(%rip)        # 201020 <setbuf@GLIBC_2.2.5>
 696:	68 01 00 00 00       	pushq  $0x1
 69b:	e9 d0 ff ff ff       	jmpq   670 <.plt>

00000000000006a0 <printf@plt>:
 6a0:	ff 25 82 09 20 00    	jmpq   *0x200982(%rip)        # 201028 <printf@GLIBC_2.2.5>
 6a6:	68 02 00 00 00       	pushq  $0x2
 6ab:	e9 c0 ff ff ff       	jmpq   670 <.plt>

00000000000006b0 <gets@plt>:
 6b0:	ff 25 7a 09 20 00    	jmpq   *0x20097a(%rip)        # 201030 <gets@GLIBC_2.2.5>
 6b6:	68 03 00 00 00       	pushq  $0x3
 6bb:	e9 b0 ff ff ff       	jmpq   670 <.plt>

00000000000006c0 <exit@plt>:
 6c0:	ff 25 72 09 20 00    	jmpq   *0x200972(%rip)        # 201038 <exit@GLIBC_2.2.5>
 6c6:	68 04 00 00 00       	pushq  $0x4
 6cb:	e9 a0 ff ff ff       	jmpq   670 <.plt>

Disassembly of section .plt.got:

00000000000006d0 <.plt.got>:
 6d0:	ff 25 22 09 20 00    	jmpq   *0x200922(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 6d6:	66 90                	xchg   %ax,%ax

Disassembly of section .text:

00000000000006e0 <_start>:
_start():
 6e0:	31 ed                	xor    %ebp,%ebp
 6e2:	49 89 d1             	mov    %rdx,%r9
 6e5:	5e                   	pop    %rsi
 6e6:	48 89 e2             	mov    %rsp,%rdx
 6e9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
 6ed:	50                   	push   %rax
 6ee:	54                   	push   %rsp
 6ef:	4c 8d 05 3a 02 00 00 	lea    0x23a(%rip),%r8        # 930 <__libc_csu_fini>
 6f6:	48 8d 0d c3 01 00 00 	lea    0x1c3(%rip),%rcx        # 8c0 <__libc_csu_init>
 6fd:	48 8d 3d 0c 01 00 00 	lea    0x10c(%rip),%rdi        # 810 <main>
 704:	ff 15 ce 08 20 00    	callq  *0x2008ce(%rip)        # 200fd8 <__libc_start_main@GLIBC_2.2.5>
 70a:	f4                   	hlt    
 70b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000000710 <deregister_tm_clones>:
deregister_tm_clones():
 710:	48 8d 3d 39 09 20 00 	lea    0x200939(%rip),%rdi        # 201050 <stdout@@GLIBC_2.2.5>
 717:	48 8d 05 39 09 20 00 	lea    0x200939(%rip),%rax        # 201057 <__TMC_END__+0x7>
 71e:	55                   	push   %rbp
 71f:	48 29 f8             	sub    %rdi,%rax
 722:	48 89 e5             	mov    %rsp,%rbp
 725:	48 83 f8 0e          	cmp    $0xe,%rax
 729:	76 15                	jbe    740 <deregister_tm_clones+0x30>
 72b:	48 8b 05 9e 08 20 00 	mov    0x20089e(%rip),%rax        # 200fd0 <_ITM_deregisterTMCloneTable>
 732:	48 85 c0             	test   %rax,%rax
 735:	74 09                	je     740 <deregister_tm_clones+0x30>
 737:	5d                   	pop    %rbp
 738:	ff e0                	jmpq   *%rax
 73a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
 740:	5d                   	pop    %rbp
 741:	c3                   	retq   
 742:	0f 1f 40 00          	nopl   0x0(%rax)
 746:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 74d:	00 00 00 

0000000000000750 <register_tm_clones>:
register_tm_clones():
 750:	48 8d 3d f9 08 20 00 	lea    0x2008f9(%rip),%rdi        # 201050 <stdout@@GLIBC_2.2.5>
 757:	48 8d 35 f2 08 20 00 	lea    0x2008f2(%rip),%rsi        # 201050 <stdout@@GLIBC_2.2.5>
 75e:	55                   	push   %rbp
 75f:	48 29 fe             	sub    %rdi,%rsi
 762:	48 89 e5             	mov    %rsp,%rbp
 765:	48 c1 fe 03          	sar    $0x3,%rsi
 769:	48 89 f0             	mov    %rsi,%rax
 76c:	48 c1 e8 3f          	shr    $0x3f,%rax
 770:	48 01 c6             	add    %rax,%rsi
 773:	48 d1 fe             	sar    %rsi
 776:	74 18                	je     790 <register_tm_clones+0x40>
 778:	48 8b 05 71 08 20 00 	mov    0x200871(%rip),%rax        # 200ff0 <_ITM_registerTMCloneTable>
 77f:	48 85 c0             	test   %rax,%rax
 782:	74 0c                	je     790 <register_tm_clones+0x40>
 784:	5d                   	pop    %rbp
 785:	ff e0                	jmpq   *%rax
 787:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 78e:	00 00 
 790:	5d                   	pop    %rbp
 791:	c3                   	retq   
 792:	0f 1f 40 00          	nopl   0x0(%rax)
 796:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 79d:	00 00 00 

00000000000007a0 <__do_global_dtors_aux>:
__do_global_dtors_aux():
 7a0:	80 3d b1 08 20 00 00 	cmpb   $0x0,0x2008b1(%rip)        # 201058 <completed.6972>
 7a7:	75 27                	jne    7d0 <__do_global_dtors_aux+0x30>
 7a9:	48 83 3d 47 08 20 00 	cmpq   $0x0,0x200847(%rip)        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 7b0:	00 
 7b1:	55                   	push   %rbp
 7b2:	48 89 e5             	mov    %rsp,%rbp
 7b5:	74 0c                	je     7c3 <__do_global_dtors_aux+0x23>
 7b7:	48 8b 3d 8a 08 20 00 	mov    0x20088a(%rip),%rdi        # 201048 <__dso_handle>
 7be:	e8 0d ff ff ff       	callq  6d0 <.plt.got>
 7c3:	e8 48 ff ff ff       	callq  710 <deregister_tm_clones>
 7c8:	5d                   	pop    %rbp
 7c9:	c6 05 88 08 20 00 01 	movb   $0x1,0x200888(%rip)        # 201058 <completed.6972>
 7d0:	f3 c3                	repz retq 
 7d2:	0f 1f 40 00          	nopl   0x0(%rax)
 7d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 7dd:	00 00 00 

00000000000007e0 <frame_dummy>:
frame_dummy():
 7e0:	48 8d 3d 01 06 20 00 	lea    0x200601(%rip),%rdi        # 200de8 <__JCR_END__>
 7e7:	48 83 3f 00          	cmpq   $0x0,(%rdi)
 7eb:	75 0b                	jne    7f8 <frame_dummy+0x18>
 7ed:	e9 5e ff ff ff       	jmpq   750 <register_tm_clones>
 7f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
 7f8:	48 8b 05 e9 07 20 00 	mov    0x2007e9(%rip),%rax        # 200fe8 <_Jv_RegisterClasses>
 7ff:	48 85 c0             	test   %rax,%rax
 802:	74 e9                	je     7ed <frame_dummy+0xd>
 804:	55                   	push   %rbp
 805:	48 89 e5             	mov    %rsp,%rbp
 808:	ff d0                	callq  *%rax
 80a:	5d                   	pop    %rbp
 80b:	e9 40 ff ff ff       	jmpq   750 <register_tm_clones>

0000000000000810 <main>:
main():
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:11
bool getString();
bool target();
char * gets(char *str);

int main(int argc, char *argv[])
{
 810:	55                   	push   %rbp
 811:	48 89 e5             	mov    %rsp,%rbp
 814:	48 83 ec 20          	sub    $0x20,%rsp
 818:	89 7d ec             	mov    %edi,-0x14(%rbp)
 81b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:14

	bool gs;
	setbuf(stdout,0);
 81f:	48 8b 05 2a 08 20 00 	mov    0x20082a(%rip),%rax        # 201050 <stdout@@GLIBC_2.2.5>
 826:	be 00 00 00 00       	mov    $0x0,%esi
 82b:	48 89 c7             	mov    %rax,%rdi
 82e:	e8 5d fe ff ff       	callq  690 <setbuf@plt>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:16 (discriminator 1)

	while( (gs=getString())) {};
 833:	b8 00 00 00 00       	mov    $0x0,%eax
 838:	e8 1c 00 00 00       	callq  859 <getString>
 83d:	88 45 ff             	mov    %al,-0x1(%rbp)
 840:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
 844:	75 ed                	jne    833 <main+0x23>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:17
	printf("Yech.... you failed to run the target.\n");
 846:	48 8d 3d fb 00 00 00 	lea    0xfb(%rip),%rdi        # 948 <_IO_stdin_used+0x8>
 84d:	e8 2e fe ff ff       	callq  680 <puts@plt>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:18
	return 1;
 852:	b8 01 00 00 00       	mov    $0x1,%eax
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:20

}
 857:	c9                   	leaveq 
 858:	c3                   	retq   

0000000000000859 <getString>:
getString():
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:22

bool getString() {
 859:	55                   	push   %rbp
 85a:	48 89 e5             	mov    %rsp,%rbp
 85d:	48 83 ec 60          	sub    $0x60,%rsp
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:24
	char buffer[81];
	buffer[0]='\0';
 861:	c6 45 a0 00          	movb   $0x0,-0x60(%rbp)
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:25
	gets(buffer);
 865:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 869:	48 89 c7             	mov    %rax,%rdi
 86c:	e8 3f fe ff ff       	callq  6b0 <gets@plt>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:26
	if (strlen(buffer)>0) {
 871:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 875:	0f b6 00             	movzbl (%rax),%eax
 878:	84 c0                	test   %al,%al
 87a:	74 1f                	je     89b <getString+0x42>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:27
		printf("Read line: %s\n",buffer);
 87c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 880:	48 89 c6             	mov    %rax,%rsi
 883:	48 8d 3d e5 00 00 00 	lea    0xe5(%rip),%rdi        # 96f <_IO_stdin_used+0x2f>
 88a:	b8 00 00 00 00       	mov    $0x0,%eax
 88f:	e8 0c fe ff ff       	callq  6a0 <printf@plt>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:28
		return true;
 894:	b8 01 00 00 00       	mov    $0x1,%eax
 899:	eb 05                	jmp    8a0 <getString+0x47>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:30
	}
	return false;
 89b:	b8 00 00 00 00       	mov    $0x0,%eax
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:31 (discriminator 1)
}
 8a0:	c9                   	leaveq 
 8a1:	c3                   	retq   

00000000000008a2 <target>:
target():
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:33

bool target() {
 8a2:	55                   	push   %rbp
 8a3:	48 89 e5             	mov    %rsp,%rbp
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:34
	printf("Whooopeeee... you ran the target!\n");
 8a6:	48 8d 3d d3 00 00 00 	lea    0xd3(%rip),%rdi        # 980 <_IO_stdin_used+0x40>
 8ad:	e8 ce fd ff ff       	callq  680 <puts@plt>
/import/linux/home1/jjeanba2/cs220/labs/lab11/lab11/target.c:35
	exit(0);
 8b2:	bf 00 00 00 00       	mov    $0x0,%edi
 8b7:	e8 04 fe ff ff       	callq  6c0 <exit@plt>
 8bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000008c0 <__libc_csu_init>:
__libc_csu_init():
 8c0:	41 57                	push   %r15
 8c2:	41 56                	push   %r14
 8c4:	41 89 ff             	mov    %edi,%r15d
 8c7:	41 55                	push   %r13
 8c9:	41 54                	push   %r12
 8cb:	4c 8d 25 06 05 20 00 	lea    0x200506(%rip),%r12        # 200dd8 <__frame_dummy_init_array_entry>
 8d2:	55                   	push   %rbp
 8d3:	48 8d 2d 06 05 20 00 	lea    0x200506(%rip),%rbp        # 200de0 <__init_array_end>
 8da:	53                   	push   %rbx
 8db:	49 89 f6             	mov    %rsi,%r14
 8de:	49 89 d5             	mov    %rdx,%r13
 8e1:	4c 29 e5             	sub    %r12,%rbp
 8e4:	48 83 ec 08          	sub    $0x8,%rsp
 8e8:	48 c1 fd 03          	sar    $0x3,%rbp
 8ec:	e8 5f fd ff ff       	callq  650 <_init>
 8f1:	48 85 ed             	test   %rbp,%rbp
 8f4:	74 20                	je     916 <__libc_csu_init+0x56>
 8f6:	31 db                	xor    %ebx,%ebx
 8f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
 8ff:	00 
 900:	4c 89 ea             	mov    %r13,%rdx
 903:	4c 89 f6             	mov    %r14,%rsi
 906:	44 89 ff             	mov    %r15d,%edi
 909:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
 90d:	48 83 c3 01          	add    $0x1,%rbx
 911:	48 39 dd             	cmp    %rbx,%rbp
 914:	75 ea                	jne    900 <__libc_csu_init+0x40>
 916:	48 83 c4 08          	add    $0x8,%rsp
 91a:	5b                   	pop    %rbx
 91b:	5d                   	pop    %rbp
 91c:	41 5c                	pop    %r12
 91e:	41 5d                	pop    %r13
 920:	41 5e                	pop    %r14
 922:	41 5f                	pop    %r15
 924:	c3                   	retq   
 925:	90                   	nop
 926:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 92d:	00 00 00 

0000000000000930 <__libc_csu_fini>:
__libc_csu_fini():
 930:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000000934 <_fini>:
_fini():
 934:	48 83 ec 08          	sub    $0x8,%rsp
 938:	48 83 c4 08          	add    $0x8,%rsp
 93c:	c3                   	retq   
