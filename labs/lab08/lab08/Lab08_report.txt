Answer questions 1-4 with the optimization set at its original value, "OPT=O0".

1. Scan through the x86Math.s and x86Math.objdump.txt files side by side.
	A. Do these two files contain similar sets of x86 instructions for the 
	   "add" function?
		>Yes, they are almost exactly the same, except the objdump file
		 doesn't contain the comments. Also, the file ending in .s uses
		 decimal integers while the objdump file uses hex numbers.
	   
	B. Do both files refer back to the original C code from which they were
	   derived?
	   >Yes, in different sections of each file, you can see snippets of
		the original C code.
	   
	C. Does the gdb disassembly match the x86 instructions in both the .s  
	   and objdump files?
	   >The gdb disassembly matches the instructions in the objdump file, 
		but not exactly the .s file (although it is very close)
	   
	D. Which format of all three do you find easier and why? 
	   >I prefer the objdump file because it organizes the instructions
		by its corresponding lines in the file.
		

2. How many assembler instructions are required for:
	A. the "add" function :			12
	B. the "subtract" function:		12
	
3. How many bytes (in hex) are needed for the x86 version of the x86Math 
   program? (You can find this by scrolling to the bottom of file x86Math.s 
   and finding the offset associated with the last instruction in the file.)
   >0172
   
   
	
4. Find the x86 add instruction that adds op1+op2 in the add function.
	A. What line number is that instruction at in the x86Math.s file?
	   >line number 218
	
	B. What hexadecimal address contains that instruction from the 
	   x86Math.objdump.txt file? 
	   >7eb
	
5. In gdb, just before you execute the instruction at 0x00005555555547eb for 
   the first time:
	A. What is the value in the "edx" register? 
	   >0
	
	B. What is the value in the "eax" register?
	   >4
	
	C. After you execute the instruction, what is the value in the "eax" 
	   register?
	   >4
	
Answer questions 6-8 with the optimization variable set to "OPT=O1" to do some 
optimization

6. Is it still possible to map directly from C code to x86 assembler 
   instructions? What has happened?
   >No. The code can't be mapped to the C code anymore because the optimizer
	reduces inefficiencies found in the original instructions.
	
7. In gdb, what x86 instruction is about to get executed when you reach the 
   first breakpoint in the "add" function?
   >add    $0x4,%edi
	 
8. 	A. How many bytes are needed for this x86 version of the x86Math 
	   program? 
	   >0086
	   
	B. How does this compare to the length of the previous version?
	   >It is much smaller
	
	C. Why is there a difference?
	   >Because the code has been optimized (certain inefficiencies have been
		recognized and changed to make the code run faster)
	 
Answer questions 9-10 with the optimization value set to "OPT=O0 -DSIMPLE"

9. 	A. How many bytes are needed for this x86 version of the x86Math 
	   program?
	   >012a
	   
	B. How does this compare to previous versions?
	   >It is a much higher number than the previous version, but still smaller
		than the very first version.
	
	C. Does the gcc optimizer do a better job than a human in this case?
	   >Technically yes, because it takes up less space than the version translated
		straight from the "human" code. But it can still be faster.

10. Compare the x86 instructions for the add function with the x86 
    instructions for the add function in the first part of the lab. What is 
    the main difference?
	>The add instructions for the first part are much shorter than in the new part.
	 This is probably because in the last part, the compiler is using the DSIMPLE
	 instructions. The main difference is that the first version has less instructions
	 for the add function than the optimized one. It looks as if the the first version
	 pushes onto the stack without popping the values back off, while the optimized version
	 pushes information to the stack AND pops it back off afterwards.
